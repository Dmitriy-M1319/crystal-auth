// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock_service.go -package=respository
//

// Package respository is a generated GoMock package.
package service

import (
	reflect "reflect"

	models "github.com/Dmitriy-M1319/crystal-auth/internal/auth/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockAuthRepository) GetUserByEmail(email string) (models.UserInfoDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(models.UserInfoDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthRepositoryMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockAuthRepository) GetUserByID(id int64) (models.UserInfoDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(models.UserInfoDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthRepositoryMockRecorder) GetUserByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByID), id)
}

// InsertNewUser mocks base method.
func (m *MockAuthRepository) InsertNewUser(user models.UserRegisterInfo) (models.UserInfoDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", user)
	ret0, _ := ret[0].(models.UserInfoDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockAuthRepositoryMockRecorder) InsertNewUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockAuthRepository)(nil).InsertNewUser), user)
}

// MockAuthKeyValueRepository is a mock of AuthKeyValueRepository interface.
type MockAuthKeyValueRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthKeyValueRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthKeyValueRepositoryMockRecorder is the mock recorder for MockAuthKeyValueRepository.
type MockAuthKeyValueRepositoryMockRecorder struct {
	mock *MockAuthKeyValueRepository
}

// NewMockAuthKeyValueRepository creates a new mock instance.
func NewMockAuthKeyValueRepository(ctrl *gomock.Controller) *MockAuthKeyValueRepository {
	mock := &MockAuthKeyValueRepository{ctrl: ctrl}
	mock.recorder = &MockAuthKeyValueRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthKeyValueRepository) EXPECT() *MockAuthKeyValueRepositoryMockRecorder {
	return m.recorder
}

// IsUserLogged mocks base method.
func (m *MockAuthKeyValueRepository) IsUserLogged(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserLogged", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserLogged indicates an expected call of IsUserLogged.
func (mr *MockAuthKeyValueRepositoryMockRecorder) IsUserLogged(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserLogged", reflect.TypeOf((*MockAuthKeyValueRepository)(nil).IsUserLogged), email)
}

// LoginUser mocks base method.
func (m *MockAuthKeyValueRepository) LoginUser(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthKeyValueRepositoryMockRecorder) LoginUser(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthKeyValueRepository)(nil).LoginUser), email)
}

// LogoutUser mocks base method.
func (m *MockAuthKeyValueRepository) LogoutUser(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockAuthKeyValueRepositoryMockRecorder) LogoutUser(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockAuthKeyValueRepository)(nil).LogoutUser), email)
}
